/* i2c - Simple example

   Simple I2C example that shows how to initialize I2C
   as well as reading and writing from and to registers for a sensor connected over I2C.

   The sensor used in this example is a MPU9250 inertial measurement unit.

   For other examples please check:
   https://github.com/espressif/esp-idf/tree/master/examples

   See README.md file to get detailed usage of this example.

   This example code is in the Public Domain (or CC0 licensed, at your option.)

   Unless required by applicable law or agreed to in writing, this
   software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
   CONDITIONS OF ANY KIND, either express or implied.
*/
#include <stdio.h>
#include "esp_log.h"
#include "driver/i2c.h"
#include "i2c-lcd.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/queue.h"

static const char *TAG = "i2c-simple-example";

#define I2C_MASTER_SCL_IO           CONFIG_I2C_MASTER_SCL      /*!< GPIO number used for I2C master clock */
#define I2C_MASTER_SDA_IO           CONFIG_I2C_MASTER_SDA      /*!< GPIO number used for I2C master data  */
#define I2C_MASTER_NUM              0                          /*!< I2C master i2c port number, the number of i2c peripheral interfaces available will depend on the chip */
#define I2C_MASTER_FREQ_HZ          400000                     /*!< I2C master clock frequency */
#define I2C_MASTER_TX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
#define I2C_MASTER_RX_BUF_DISABLE   0                          /*!< I2C master doesn't need buffer */
#define I2C_MASTER_TIMEOUT_MS       1000


#define INPUT_PIN_1 25
#define INPUT_PIN_2 33
#define INPUT_PIN_3 32
#define INPUT_PIN_4 35

#define LED_PIN_1 2
#define LED_PIN_2 4
#define LED_PIN_3 16
#define LED_PIN_4 17

#define LED_PIN 2




/**
 * @brief i2c master initialization
 */
static esp_err_t i2c_master_init(void)
{
    int i2c_master_port = I2C_NUM_0;

    i2c_config_t conf = {
        .mode = I2C_MODE_MASTER,
        .sda_io_num = GPIO_NUM_21,
        .scl_io_num = GPIO_NUM_22,
        .sda_pullup_en = GPIO_PULLUP_ENABLE,
        .scl_pullup_en = GPIO_PULLUP_ENABLE,
        .master.clk_speed = 100000,
    };

    i2c_param_config(i2c_master_port, &conf);

    return i2c_driver_install(i2c_master_port, conf.mode, 0, 0, 0);
}


enum etat{Ready_To_Connect,Vehicle_Connected,Started_Charging,Stopped_Charging};
bool on = true;
int counter = 0;

int state = 0;
QueueHandle_t interputQueue;
enum etat etat_actuel;

static void IRAM_ATTR gpio_interrupt_handler(void *args)
{
    int pinNumber = (int)args;
    xQueueSendFromISR(interputQueue, &pinNumber, NULL);
}

void Interrupt_Task_bck(void *params)
{
    
    counter = counter+1;
    lcd_clear();
    char buff[10];
    sprintf(buff,"Triggered");
    //sprintf(buff,"val = %d",counter);
    lcd_put_cur(0,0);
    lcd_send_string(buff);
    
    /*lcd_clear();
    sprintf(buff,"Back");
    lcd_put_cur(0,0);
    lcd_send_string(buff);*/

}

void transition();
void Interrupt_Task(void *params)
{
    int pinNumber;
    for (;;) {
        if (xQueueReceive(interputQueue, &pinNumber, portMAX_DELAY)) {
                
                //transition(etat_actuel, (enum etat)pinNumber);
                gpio_set_level(LED_PIN,1);
                gpio_set_level(LED_PIN_1,1);
                gpio_set_level(LED_PIN_2,1);
                gpio_set_level(LED_PIN_3,1);
                gpio_set_level(LED_PIN_4,1);
                
                vTaskDelay(pdMS_TO_TICKS(100));
                gpio_set_level(LED_PIN,0);
                gpio_set_level(LED_PIN_1,0);
                gpio_set_level(LED_PIN_2,0);
                gpio_set_level(LED_PIN_3,0);
                gpio_set_level(LED_PIN_4,0);
                /*gpio_set_level(LED_PIN,1);
                vTaskDelay(pdMS_TO_TICKS(100));
                gpio_set_level(LED_PIN,0);*/
        }
    }
}


void display_charging(); // To be implemented !!!

void transition(enum etat etat_actuel, enum etat signal){
   

    lcd_clear();
    lcd_put_cur(0,0);
    gpio_set_level(LED_PIN_1,1);

    if( etat_actuel == (signal-1) || signal == Ready_To_Connect )
    {
        switch(signal){

            case Ready_To_Connect:
                lcd_send_string("Connect the Car :) ");
                gpio_set_level(LED_PIN_1,1);
                break;
            case Vehicle_Connected:
                gpio_set_level(LED_PIN_2,1);
                lcd_send_string("Vehicle detected !");
                lcd_put_cur(1,0);
                lcd_send_string("Processing ...");
                break;
            case Started_Charging:
                gpio_set_level(LED_PIN_3,1);
                lcd_send_string("Charging "); //To be replaced with the display charging funtion !!!
                break;
            case Stopped_Charging:
                gpio_set_level(LED_PIN_4,1);
                lcd_send_string("Charging Stopped");
                lcd_send_string("Enjoy the ride !");
        }
    }
    else{
        lcd_send_string("Error!!!");
        lcd_put_cur(1,0);
        lcd_send_string("Please Restrart!");
    }

}

void app_main(void)
{

    etat_actuel = Ready_To_Connect;

    ESP_ERROR_CHECK(i2c_master_init());
    ESP_LOGI(TAG, "I2C initialized successfully");

    lcd_init();
    
/********************************************/
    //gpio_pad_select_gpio(INPUT_PIN);
    //gpio_pad_select_gpio(LED_PIN);
    gpio_set_direction(LED_PIN_1, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_PIN_2, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_PIN_3, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_PIN_4, GPIO_MODE_OUTPUT);
    gpio_set_direction(LED_PIN, GPIO_MODE_OUTPUT);

    //gpio_pad_select_gpio(INPUT_PIN);
    gpio_set_direction(INPUT_PIN_1, GPIO_MODE_INPUT);
    gpio_set_intr_type(INPUT_PIN_1, GPIO_INTR_POSEDGE);
    gpio_set_direction(INPUT_PIN_2, GPIO_MODE_INPUT);
    gpio_set_intr_type(INPUT_PIN_2, GPIO_INTR_POSEDGE);
    gpio_set_direction(INPUT_PIN_3, GPIO_MODE_INPUT);
    gpio_set_intr_type(INPUT_PIN_3, GPIO_INTR_POSEDGE);    
    gpio_set_direction(INPUT_PIN_4, GPIO_MODE_INPUT);
    gpio_set_intr_type(INPUT_PIN_4, GPIO_INTR_POSEDGE);
    gpio_pulldown_en(INPUT_PIN_1);
    gpio_pullup_dis(INPUT_PIN_1);
    gpio_pulldown_en(INPUT_PIN_2);
    gpio_pullup_dis(INPUT_PIN_2);
    gpio_pulldown_en(INPUT_PIN_3);
    gpio_pullup_dis(INPUT_PIN_3);
    gpio_pulldown_en(INPUT_PIN_4);
    gpio_pullup_dis(INPUT_PIN_4);

    interputQueue = xQueueCreate(10, sizeof(int));
    xTaskCreate(Interrupt_Task, "Interrupt_Task", 2048, NULL, 1, NULL);

    gpio_install_isr_service(0);
    gpio_isr_handler_add(INPUT_PIN_1, gpio_interrupt_handler, (void* )0);
    gpio_isr_handler_add(INPUT_PIN_2, gpio_interrupt_handler, (void *)1);
    gpio_isr_handler_add(INPUT_PIN_3, gpio_interrupt_handler, (void *)2);
    gpio_isr_handler_add(INPUT_PIN_4, gpio_interrupt_handler, (void *)3);
      /*************************************/

    gpio_set_level(LED_PIN_1,0);


}
